// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  votes    Vote[]
  Post     Post[]
}

model Post {
  id       String    @id @default(uuid())
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  Question Question?
  postId   String?
  Comment  Comment?
  parent   Post?     @relation("Parent", fields: [parentId], references: [id])
  parentId String?
  children Post[]    @relation("Parent")
  content  String
}

model Answer {
  id         String    @id @default(uuid())
  question   Question  @relation(fields: [questionId], references: [id])
  questionId String
  content    String
  Vote       Vote[]
  Comment    Comment[]
}

model Comment {
  id       String  @id @default(uuid())
  Answer   Answer? @relation(fields: [answerId], references: [id])
  answerId String?
  post     Post    @relation(fields: [postId], references: [id])
  postId   String  @unique
}

model Question {
  id       String   @id @default(uuid())
  exam     Exam     @relation(fields: [examId], references: [id])
  examId   String
  post     Post     @relation(fields: [postId], references: [id])
  postId   String   @unique
  answerId String?
  Answer   Answer[]
}

model Vote {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  answer   Answer @relation(fields: [answerId], references: [id])
  answerId String
}

model Exam {
  id        String     @id @default(uuid())
  questions Question[]
}

// Model de token's inválidos. Ainda vou criar um método de logout.
model BlackListToken {
  id     String  @id @default(uuid())
  token  String
  userId String?
}
